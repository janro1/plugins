name: Publish

on:
  push:
    branches:
      - main
      - ci

env:
  RUST_LOG: debug
  CARGO_INCREMENTAL: 0

jobs:
  build:
    # if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              swc-dev plugin build --package --release
              strip -x *.node
          - host: windows-latest
            build: swc-dev plugin build --package --release
            target: x86_64-pc-windows-msvc
          - host: windows-latest
            build: |
              export CARGO_PROFILE_RELEASE_CODEGEN_UNITS=32;
              export CARGO_PROFILE_RELEASE_LTO=false
              swc-dev plugin build --package --release --target i686-pc-windows-msvc
              yarn test
            target: i686-pc-windows-msvc
            setup: |
              choco install nodejs-lts --x86 -y --force
              echo "C:\Program Files (x86)\nodejs" >> $GITHUB_PATH
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: |
              docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD $DOCKER_REGISTRY_URL
              docker pull $DOCKER_REGISTRY_URL/napi-rs/napi-rs/nodejs-rust:lts-debian
              docker tag $DOCKER_REGISTRY_URL/napi-rs/napi-rs/nodejs-rust:lts-debian builder
            build: |
              docker run --rm -v ~/.cargo/git:/root/.cargo/git -v ~/.cargo/registry:/root/.cargo/registry -v $(pwd):/build -w /build builder swc-dev plugin build --package --release && strip swc.linux-x64-gnu.node
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            docker: |
              docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD $DOCKER_REGISTRY_URL
              docker pull $DOCKER_REGISTRY_URL/napi-rs/napi-rs/nodejs-rust:lts-alpine
              docker tag $DOCKER_REGISTRY_URL/napi-rs/napi-rs/nodejs-rust:lts-alpine builder
            build: docker run --rm -v ~/.cargo/git:/root/.cargo/git -v ~/.cargo/registry:/root/.cargo/registry -v $(pwd):/build -w /build builder swc-dev plugin build --package --release && strip swc.linux-x64-musl.node
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
              export CC=$(xcrun -f clang);
              export CXX=$(xcrun -f clang++);
              SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
              export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
              swc-dev plugin build --package --release --target=aarch64-apple-darwin
              strip -x *.node
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            setup: |
              sudo apt-get update
              sudo apt-get install g++-aarch64-linux-gnu gcc-aarch64-linux-gnu -y
            build: |
              swc-dev plugin build --package --release --target=aarch64-unknown-linux-gnu
              aarch64-linux-gnu-strip swc.linux-arm64-gnu.node
          - host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf -y
            build: |
              swc-dev plugin build --package --release --target=armv7-unknown-linux-gnueabihf
              arm-linux-gnueabihf-strip swc.linux-arm-gnueabihf.node
          - host: ubuntu-latest
            target: aarch64-linux-android
            build: |
              export CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android24-clang"
              swc-dev plugin build --package --release --target aarch64-linux-android
              ${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android-strip *.node
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            downloadTarget: aarch64-unknown-linux-musl
            docker: |
              docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD $DOCKER_REGISTRY_URL
              docker pull ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
              docker tag ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine builder
            build: |
              docker run --rm -v ~/.cargo/git:/root/.cargo/git -v ~/.cargo/registry:/root/.cargo/registry -v $(pwd):/build -w /build builder sh -c "rustup toolchain install $(cat ./rust-toolchain) && rustup target add aarch64-unknown-linux-musl && swc-dev plugin build --package --release --target=aarch64-unknown-linux-musl && /aarch64-linux-musl-cross/bin/aarch64-linux-musl-strip swc.linux-arm64-musl.node"
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: swc-dev plugin build --package --release --target aarch64-pc-windows-msvc
    name: stable - ${{ matrix.settings.target }} - node@14
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 16
          check-latest: true
      - name: Install
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          target: ${{ matrix.settings.target }}
      - name: Generate Cargo.lock
        uses: actions-rs/cargo@v1
        with:
          command: generate-lockfile
      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: ${{ matrix.settings.target }}-node@14-cargo-registry-trimmed-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git
          key: ${{ matrix.settings.target }}-node@14-cargo-index-trimmed-${{ hashFiles('**/Cargo.lock') }}
      # - name: Cache NPM dependencies
      #   uses: actions/cache@v2
      #   with:
      #     path: node_modules
      #     key: npm-cache-${{ matrix.settings.target }}-node@14-${{ hashFiles('yarn.lock') }}
      - name: Pull latest image
        run: ${{ matrix.settings.docker }}
        env:
          DOCKER_REGISTRY_URL: ghcr.io
          DOCKER_USERNAME: ${{ github.actor }}
          DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ matrix.settings.docker }}
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Install swc devtool
        shell: bash
        run: |
          ./scripts/ci/install-swc-dev.sh
      # - name: Install dependencies
      #   run: yarn install --ignore-scripts --registry https://registry.npmjs.org --network-timeout 300000
      - name: Build
        run: ${{ matrix.settings.build }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: bindings
          path: "*.swc-pkg.tgz"

  build-freebsd:
    runs-on: macos-10.15
    name: Build - FreeBSD
    steps:
      - uses: actions/checkout@v2
      - name: Build
        id: build
        uses: vmactions/freebsd-vm@v0.1.5
        env:
          DEBUG: "napi:*"
          RUSTUP_HOME: /usr/local/rustup
          CARGO_HOME: /usr/local/cargo
          RUSTUP_IO_THREADS: 1
        with:
          envs: "DEBUG RUSTUP_HOME CARGO_HOME RUSTUP_IO_THREADS"
          usesh: true
          mem: 6000
          prepare: |
            pkg install -y curl node14
            curl -qL https://www.npmjs.com/install.sh | sh
            npm install -g yarn
            curl https://sh.rustup.rs -sSf --output rustup.sh
            sh rustup.sh -y --profile minimal --default-toolchain stable
            source /usr/local/cargo/env
            echo "~~~~ rustc --version ~~~~"
            rustc --version
            echo "~~~~ node -v ~~~~"
            node -v
            echo "~~~~ yarn --version ~~~~"
            yarn --version
          run: |
            export PATH="/usr/local/cargo/bin:$PATH"
            ./scripts/ci/install-swc-dev.sh
            pwd
            ls -lah
            whoami
            env
            freebsd-version
            swc-dev plugin build --package --release
            rm -rf node_modules
            rm -rf target
      - name: "List files"
        run: ls -la

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: bindings
          path: "*.swc-pkg.tgz"

  publish:
    name: Publish on npm
    runs-on: ubuntu-latest
    needs:
      - build
      - build-freebsd
    steps:
      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 16

      # - name: Set release name
      #   run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: List binaries
        run: ls -R artifacts
        shell: bash

      - name: Install swc devtool
        shell: bash
        run: |
          ./scripts/ci/install-swc-dev.sh

      - name: Configure npm
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish platform packages
        run: |
          swc-dev plugin publish-deps --artifacts-dir artifacts/bindings  --access public

      - name: Publish main packages
        run: |
          npm publish --workspaces --access public
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
